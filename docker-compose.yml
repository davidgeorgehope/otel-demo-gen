version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - LLM_PROVIDER=openai
      - OPENAI_MODEL=gpt-4o-mini
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-anthropic.claude-3-5-sonnet-20241022-v2:0}
      - OTEL_COLLECTOR_URL=${OTEL_COLLECTOR_URL:-http://otel-collector:4318}
      # Job Management Limits (defaults shown)
      - MAX_ACTIVE_JOBS=${MAX_ACTIVE_JOBS:-10}
      - MAX_JOBS_PER_USER=${MAX_JOBS_PER_USER:-3}  
      - MAX_JOB_DURATION_HOURS=${MAX_JOB_DURATION_HOURS:-2}
      - JOB_CLEANUP_HOURS=${JOB_CLEANUP_HOURS:-24}
      - CLEANUP_INTERVAL_MINUTES=${CLEANUP_INTERVAL_MINUTES:-15}
    networks:
      - otel-demo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - otel-demo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Optional: OpenTelemetry Collector for testing
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    networks:
      - otel-demo
    restart: unless-stopped

networks:
  otel-demo:
    driver: bridge 